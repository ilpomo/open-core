name: CI/CD

on:
  pull_request:
    branches:
      - main

jobs:
  lint-test-and-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
          pip install toml-cli

      - name: Extract open-core version
        id: get_version
        run: echo "VERSION=$(toml get pyproject.toml project.version)" >> $GITHUB_ENV

      - name: Lint with Ruff
        run: |
          ruff check --output-format=github .

      - name: Test with Pytest
        run: |
          pytest --cov=src --cov-report xml:coverage.xml --cov-report term-missing

      - name: Prepare coverage report for SonarCloud
        run: |
          sed -i 's|/home/runner/work/open-core/open-core/src|src|g' coverage.xml

      - name: Scan with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectVersion=${{ env.VERSION }}
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.version=${{ matrix.python-version }}

  merge-pull-request:
    needs: lint-test-and-scan
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout `main` branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Merge `dev` branch into `main` branch
        run: |
          git fetch origin
          git checkout main
          git merge origin/dev
          git push origin main

  tag-and-release:
    needs: merge-pull-request
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev]
          pip install toml-cli

      - name: Extract version from pyproject.toml
        id: get_version
        run: echo "VERSION=$(toml get pyproject.toml project.version)" >> $GITHUB_ENV

      - name: Create and push the new tag
        run: |
          echo "Creating tag: ${{ env.VERSION }}"
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag -a "${{ env.VERSION }}" -m "Release version ${{ env.VERSION }}"
          git push origin "refs/tags/${{ env.VERSION }}"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ env.VERSION }}"
          release_name: "${{ env.VERSION }}"
          draft: false
          prerelease: false

  publish:
    needs: tag-and-release
    runs-on: ubuntu-latest
    environment: pypi-publish

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Build package
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build

      - name: Publish to PyPI via Trusted Publishers
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          owner: ilpomo
          publisher-id: ilpomo
          repository-url: https://github.com/ilpomo/open-core